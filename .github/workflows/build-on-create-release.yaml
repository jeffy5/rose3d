name: Build on Release created

on:
    release:
        types:
            - created

env:
    RELEASE_NAME: ${{ github.event.release.name }}
    RELEASE_BODY: ${{ github.event.release.body }}
    RELEASE_URL: "https://github.com/jeffy5/rose3d/releases/download"

jobs:
    build-windows:
        name: Build Windows Packages

        runs-on: windows-2022

        steps:
            - name: Prepare VC++ Runtime
              run: choco install -y vcredist2017

            - name: Checkout Code
              uses: actions/checkout@v3
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  submodules: 'true'

            - name: Use Node.js 16
              uses: actions/setup-node@v3
              with:
                  node-version: 16

            - run: npm install -g npm@latest
            - run: npm install

            - run: npm run build

            - name: Build Windows x64 Binaries
              run: npm run build:win-x64
            #   env:
            #       CSC_LINK: ${{ secrets.CSC_LINK_WINDOWS }}
            #       CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD_WINDOWS }}

            - name: Release on Github
              uses: softprops/action-gh-release@v1
              with:
                  files: |
                      ./output/*.exe
                      ./output/latest.yml

    build-macos:
        name: Build macOS Packages
        runs-on: macos-11
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  submodules: 'true'

            - name: Checkout submodules
              run: git submodule update --init --recursive

            - name: Use Node.js 16
              uses: actions/setup-node@v3
              with:
                  node-version: 16

            - run: npm install -g npm@latest
            - run: npm install

            - run: npm run build

            - name: Build macOS Binaries
              run: npm run build:mac
              env:
                  # CSC_LINK: ${{ secrets.CSC_LINK_MACOS }}
                  # CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD_MACOS }}
                  APPLEID: ${{ secrets.APPLEID }}
                  APPLEIDPASS: ${{ secrets.APPLEIDPASS }}

            - name: Release on Github
              uses: softprops/action-gh-release@v1
              with:
                  files: |
                      ./output/*.zip
                      ./output/*.dmg
                      ./output/latest-mac.yml

    build-linux:
        name: Build Linux Packages

        # Ubuntu 20.04: ubuntu-latest or ubuntu-20.04
        runs-on: ubuntu-latest

        steps:
            - name: Checkout Code
              uses: actions/checkout@v3
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  submodules: 'true'

            - name: Use Node.js 16
              uses: actions/setup-node@v3
              with:
                  node-version: 16

            - run: npm install -g npm@latest
            - run: npm install

            - run: npm run build

            - name: Build Linux x64 Binaries
              run: npm run build:linux-x64

            - run: |
                  PRODUCT_NAME="Rose3D"
                  PACKAGE_NAME="Rose3D"
                  PACKAGE_VERSION=`node -e "console.log(require('./src/package.json').version)"`
                  RELEASE=${PACKAGE_NAME}-${PACKAGE_VERSION}

                  ln -sf ./output/linux-unpacked "${RELEASE}-linux-x64"
                  tar zcfh "./output/${RELEASE}-linux-x64.tar.gz" "${RELEASE}-linux-x64"
                  rm -f "${RELEASE}-linux-x64"

            - name: Release on Github
              uses: softprops/action-gh-release@v1
              with:
                  files: |
                      ./output/*.deb
                      ./output/*.rpm
                      ./output/*.tar.gz

    notice-in-feishu:
        needs: [build-windows, build-linux, build-macos]
        name: notice in feishu
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Use Node.js 16
              uses: actions/setup-node@v3
              with:
                  node-version: 16

            - name: Send POST request
              env:
                  FEISHU_WEBHOOK: ${{ secrets.FEISHU_WEBHOOK }}
              run: |
                  export PACKAGE_VERSION=`node -e "console.log(require('./src/package.json').version)"`

                  export WINDOW_PACKAGE_NAME="Rose3D-${PACKAGE_VERSION}-win-x64.exe"
                  export WINDOW_PACKAGE_URL="${RELEASE_URL}/${RELEASE_NAME}/${WINDOW_PACKAGE_NAME}"
                  export LINUX_PACKAGE_NAME="Rose3D-${PACKAGE_VERSION}-linux-x64.tar.gz"
                  export LINUX_PACKAGE_URL="${RELEASE_URL}/${RELEASE_NAME}/${LINUX_PACKAGE_NAME}"

                  export MAC_PACKAGE_NAME="Rose3D-${PACKAGE_VERSION}-mac-x64.dmg"
                  export MAC_PACKAGE_URL="${RELEASE_URL}/${RELEASE_NAME}/${MAC_PACKAGE_NAME}"
                  export MAC_ARM_PACKAGE_NAME="Rose3D-${PACKAGE_VERSION}-mac-arm64.dmg"
                  export MAC_ARM_PACKAGE_URL="${RELEASE_URL}/${RELEASE_NAME}/${MAC_ARM_PACKAGE_NAME}"

                  export RELEASE_BODY_ESCAPE="${RELEASE_BODY//[$'\n\r']/ }"
                  export MESSAGE_BODY='{
                      "msg_type":"post",
                      "content":{
                          "post":{
                              "zh_cn":{
                                  "title":"${RELEASE_NAME}",
                                  "content":[
                                      [
                                          {
                                              "tag":"text",
                                              "text":"${RELEASE_BODY_ESCAPE}"
                                          }
                                      ],
                                      [
                                          {
                                              "tag":"a",
                                              "text":"${WINDOW_PACKAGE_NAME}",
                                              "href":"${WINDOW_PACKAGE_URL}"
                                          }
                                      ],
                                      [
                                          {
                                              "tag":"a",
                                              "text":"${LINUX_PACKAGE_NAME}",
                                              "href":"${LINUX_PACKAGE_URL}"
                                          }
                                      ],
                                      [
                                          {
                                              "tag":"a",
                                              "text":"${MAC_PACKAGE_NAME}",
                                              "href":"${MAC_PACKAGE_URL}"
                                          }
                                      ],
                                      [
                                          {
                                              "tag":"a",
                                              "text":"${MAC_ARM_PACKAGE_NAME}",
                                              "href":"${MAC_ARM_PACKAGE_URL}"
                                          }
                                      ]
                                  ]
                              }
                          }
                      }
                  }'
                  echo $MESSAGE_BODY
                  export MESSAGE_BODY=$(echo $MESSAGE_BODY | envsubst)
                  echo $MESSAGE_BODY

                  curl -X POST -H "Content-Type: application/json" -d "$MESSAGE_BODY" $FEISHU_WEBHOOK
